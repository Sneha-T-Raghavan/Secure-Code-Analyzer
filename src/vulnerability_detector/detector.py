"""
Vulnerability Detector Module

This module analyzes parsed code to identify security vulnerabilities.
"""

class VulnerabilityDetector:
    def __init__(self):
        # Define patterns for common vulnerabilities
        self.vulnerability_patterns = {
            'hardcoded_credentials': [
                r'password\s*=\s*[\'"][\w\d]+[\'"]',
                r'api_key\s*=\s*[\'"][\w\d]+[\'"]',
                r'secret\s*=\s*[\'"][\w\d]+[\'"]'
            ],
            'sql_injection': [
                r'execute\([\'"]SELECT.*\%s',
                r'execute\([\'"]INSERT.*\%s',
                r'execute\([\'"]UPDATE.*\%s',
                r'execute\([\'"]DELETE.*\%s'
            ],
            'weak_encryption': [
                r'MD5\(',
                r'SHA1\(',
                r'DES\('
            ],
            'insecure_api': [
                r'eval\(',
                r'exec\(',
                r'system\('
            ]
        }
    
    def analyze_code(self, parsed_code):
        """Analyze parsed code for vulnerabilities
        
        Args:
            parsed_code (dict): Parsed code from the CodeScanner
            
        Returns:
            list: List of detected vulnerabilities
        """
        vulnerabilities = []
        
        # Extract content from parsed code
        if not parsed_code or 'content' not in parsed_code:
            return vulnerabilities
            
        content = parsed_code['content']
        file_path = parsed_code.get('file_path', 'unknown')
        language = parsed_code.get('language', 'unknown')
        
        # Scan for each vulnerability type
        import re
        
        for vuln_type, patterns in self.vulnerability_patterns.items():
            for pattern in patterns:
                matches = re.finditer(pattern, content, re.IGNORECASE)
                
                for match in matches:
                    # Find line number
                    line_number = content[:match.start()].count('\n') + 1
                    code_snippet = match.group(0)
                    
                    vulnerabilities.append({
                        'type': vuln_type,
                        'file_path': file_path,
                        'language': language,
                        'line_number': line_number,
                        'code_snippet': code_snippet,
                        'severity': self._determine_severity(vuln_type)
                    })
        
        return vulnerabilities
        
    def _determine_severity(self, vuln_type):
        """Determine the severity level of a vulnerability type
        
        Args:
            vuln_type (str): Type of vulnerability
            
        Returns:
            str: Severity level (high, medium, low)
        """
        severity_levels = {
            'hardcoded_credentials': 'high',
            'sql_injection': 'high',
            'weak_encryption': 'medium',
            'insecure_api': 'high'
        }
        
        return severity_levels.get(vuln_type, 'medium')
        
    def generate_report(self, vulnerabilities):
        """Generate a report of vulnerabilities
        
        Args:
            vulnerabilities (list): List of detected vulnerabilities
            
        Returns:
            dict: Summary report of vulnerabilities
        """
        if not vulnerabilities:
            return {
                'total_vulnerabilities': 0,
                'vulnerability_types': {},
                'severity_counts': {},
                'details': []
            }
            
        # Count vulnerabilities by type and severity
        vuln_types = {}
        severity_counts = {'high': 0, 'medium': 0, 'low': 0}
        
        for vuln in vulnerabilities:
            vuln_type = vuln['type']
            severity = vuln['severity']
            
            vuln_types[vuln_type] = vuln_types.get(vuln_type, 0) + 1
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        return {
            'total_vulnerabilities': len(vulnerabilities),
            'vulnerability_types': vuln_types,
            'severity_counts': severity_counts,
            'details': vulnerabilities
        }